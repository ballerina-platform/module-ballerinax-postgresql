/*
 * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/plugin-gradle'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
    }
    dependencies {
        classpath "io.ballerina:plugin-gradle:${project.ballerinaGradlePluginVersion}"
    }
}

description = 'Ballerina - Postgresql Ballerina Generator'

def packageName = 'postgresql'
def packageOrg = 'ballerinax'
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")

def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def compilerPluginTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/CompilerPlugin.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")
def compilerPluginTomlFile = new File("$project.projectDir/CompilerPlugin.toml")

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", '')
    }
}

apply plugin: 'io.ballerina.plugin'

ballerina {
    packageOrganization = packageOrg
    module = packageName
    langVersion = ballerinaLangVersion
}

dependencies {
    externalJars(group: 'io.ballerina.stdlib', name: 'sql-native', version: "${stdlibSqlVersion}") {
        transitive = false
    }
}

task updateTomlFiles {
    doLast {
        def stdlibDependentSqlVersion = stripBallerinaExtensionVersion(project.stdlibSqlVersion)

        def newConfig = ballerinaTomlFilePlaceHolder.text.replace('@project.version@', project.version.toString())
        newConfig = newConfig.replace('@toml.version@', tomlVersion)
        newConfig = newConfig.replace('@sql.version@', stdlibDependentSqlVersion)
        newConfig = newConfig.replace('@sql.native.version@', project.stdlibSqlVersion)
        newConfig = newConfig.replace('@stdlib.sql.version@', stdlibDependentSqlVersion)
        ballerinaTomlFile.text = newConfig

        def newCompilerPluginToml = compilerPluginTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        compilerPluginTomlFile.text = newCompilerPluginToml
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the native jar versions\" Ballerina.toml Dependencies.toml CompilerPlugin.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the native jar versions' Ballerina.toml Dependencies.toml CompilerPlugin.toml"
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-${packageOrg}-${packageName}")
            credentials {
                username = System.getenv('publishUser')
                password = System.getenv('publishPAT')
            }
        }
    }
}


tasks.register('startPostgresServers') {
    doLast {
        def stdOut = new ByteArrayOutputStream()
        def cmd = Os.isFamily(Os.FAMILY_WINDOWS) ? ['cmd', '/c'] : ['sh', '-c']
        exec {
            commandLine cmd + ["docker compose -f tests/resources/compose.yaml ps --services --filter status=running"]
            standardOutput = stdOut
        }
        if (stdOut.toString().trim().isEmpty()) {
            println "Starting Postgres server."
            exec {
                commandLine cmd + ["docker compose -f tests/resources/compose.yaml up -d"]
            }
            println stdOut.toString()
            // Wait for the Postgres container to be healthy
            def healthy = false
            def retries = 20
            def healthCheckCmd = cmd + ["docker inspect --format='{{.State.Health.Status}}' ballerina-postgresql-ssl"]
            for (int i = 0; i < retries; i++) {
                def healthOut = new ByteArrayOutputStream()
                exec {
                    commandLine healthCheckCmd
                    ignoreExitValue = true
                    standardOutput = healthOut
                }
                if (healthOut.toString().trim().replaceAll("'", "") == "healthy") {
                    healthy = true
                    break
                }
                sleep(5 * 1000)
            }
            if (!healthy) {
                throw new GradleException("Postgres server did not become healthy in time.")
            }
        } else {
            println "Expected Postgres containers are already running. Exiting without starting new containers."
        }
    }
}

tasks.register('stopPostgresServers') {
    doLast {
        def stdOut = new ByteArrayOutputStream()
        def cmd = Os.isFamily(Os.FAMILY_WINDOWS) ? ['cmd', '/c'] : ['sh', '-c']
        exec {
            commandLine cmd + ["docker compose -f tests/resources/compose.yaml ps --services --filter status=running"]
            standardOutput = stdOut
        }
        if (!stdOut.toString().trim().isEmpty()) {
            println "Stopping Postgres server."
            exec {
                commandLine cmd + ["docker compose -f tests/resources/compose.yaml rm -svf"]
                standardOutput = stdOut
            }
            println stdOut.toString()
            sleep(5 * 1000)
        } else {
            println "Postgres server is not started."
        }
    }
}

updateTomlFiles.dependsOn copyStdlibs

build.dependsOn "generatePomFileForMavenPublication"
build.dependsOn ":${packageName}-native:build"
test.dependsOn ":${packageName}-native:build"
build.dependsOn ":${packageName}-compiler-plugin:build"
test.dependsOn ":${packageName}-compiler-plugin:build"
test.dependsOn "startPostgresServers"
test.finalizedBy "stopPostgresServers"
