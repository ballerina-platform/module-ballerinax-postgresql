/*
 * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'io.ballerina.plugin'
}

description = 'Ballerina - Postgresql Ballerina Generator'

def packageName = 'postgresql'
def packageOrg = 'ballerinax'
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")

def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def compilerPluginTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/CompilerPlugin.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")
def compilerPluginTomlFile = new File("$project.projectDir/CompilerPlugin.toml")

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", '')
    }
}

ballerina {
    packageOrganization = packageOrg
    module = packageName
    langVersion = ballerinaLangVersion
}

dependencies {
    externalJars(group: 'io.ballerina.stdlib', name: 'sql-native', version: "${stdlibSqlVersion}") {
        transitive = false
    }
}

task updateTomlFiles {
    doLast {
        def stdlibDependentSqlVersion = stripBallerinaExtensionVersion(project.stdlibSqlVersion)

        def newConfig = ballerinaTomlFilePlaceHolder.text.replace('@project.version@', project.version.toString())
        newConfig = newConfig.replace('@toml.version@', tomlVersion)
        newConfig = newConfig.replace('@sql.version@', stdlibDependentSqlVersion)
        newConfig = newConfig.replace('@sql.native.version@', project.stdlibSqlVersion)
        newConfig = newConfig.replace('@stdlib.sql.version@', stdlibDependentSqlVersion)
        ballerinaTomlFile.text = newConfig

        def newCompilerPluginToml = compilerPluginTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        compilerPluginTomlFile.text = newCompilerPluginToml
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the native jar versions\" Ballerina.toml Dependencies.toml CompilerPlugin.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the native jar versions' Ballerina.toml Dependencies.toml CompilerPlugin.toml"
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-${packageOrg}-${packageName}")
            credentials {
                username = System.getenv('publishUser')
                password = System.getenv('publishPAT')
            }
        }
    }
}

def testContainerName = "ballerina-postgresql-testcontainer"
def limitedContainerName = "ballerina-postgresql-limitedcontainer"
def poolContainerName = "ballerina-postgresql-poolcontainer"
def sslContainerName = "ballerina-postgresql-sslcontainer"

task createTestDockerImage(type: Exec) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        def standardOutput = new ByteArrayOutputStream()
        commandLine 'sh', '-c', "docker build -f ${project.projectDir}/tests/resources/Dockerfile -t ballerinax-postgresql" +
                " -q ${project.projectDir}/tests/resources/"
        doLast {
            checkExecResult(executionResult, 'Error', standardOutput)
            sleep(10 * 1000)
        }
    }
}

def checkExecResult(executionResult, failText, standardOutput){
    if (executionResult) {
        if (executionResult.get().getExitValue() != 0) {
            throw new GradleException('Non-zero exit value: ' + executionResult.get().getExitValue())
        }
        if (standardOutput.toString().contains(failText)){
            throw new GradleException('"' + failText + '" string in output: ' + standardOutput.toString())
        }
    } else {
        throw new GradleException('Returned a null execResult object')
    }
}

def checkTestDockerContainerStatus(containerName) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        try {
            return exec {
                commandLine 'sh', '-c', "docker exec ${containerName} psql -U postgres -h localhost -p 5432"
            }.exitValue
        } catch (all) {
            return 1;
        }
    }
}

task startTestDockerContainer(type: Exec) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        def standardOutput = new ByteArrayOutputStream()
        commandLine 'sh', '-c', "docker run --rm -d --name ${testContainerName} -e POSTGRES_PASSWORD=postgres -e POSTGRES_HOST_AUTH_METHOD=trust -p 5432:5432 -d ballerinax-postgresql"
        
        def healthCheck = 1;
        def counter = 0;
        doLast {
            checkExecResult(executionResult, 'Error', standardOutput)
            while (healthCheck != 0 && counter < 12) {
                sleep(5 * 1000)
                healthCheck = checkTestDockerContainerStatus(testContainerName)
                counter = counter + 1;
            }
            if (healthCheck != 0) {
                throw new GradleException("Docker container '${testContainerName}' health test exceeded timeout!")
            }
        }
    }
}

task startTestLimitedDockerContainer(type: Exec) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        def standardOutput = new ByteArrayOutputStream()
        commandLine 'sh', '-c', "docker run --rm -d --name ${limitedContainerName} -e POSTGRES_PASSWORD=postgres -e POSTGRES_HOST_AUTH_METHOD=trust -p 5431:5432 -d ballerinax-postgresql postgres -N 5"

        def healthCheck = 1;
        def counter = 0;
        doLast {
            checkExecResult(executionResult, 'Error', standardOutput)
            while (healthCheck != 0 && counter < 12) {
                sleep(5 * 1000)
                healthCheck = checkTestDockerContainerStatus(testContainerName)
                counter = counter + 1;
            }
            if (healthCheck != 0) {
                throw new GradleException("Docker container '${testContainerName}' health test exceeded timeout!")
            }
        }
    }
}

task startTestPoolDockerContainer(type: Exec) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        def standardOutput = new ByteArrayOutputStream()
        commandLine 'sh', '-c', "docker run --rm -d --name ${poolContainerName} -e POSTGRES_PASSWORD=postgres -e POSTGRES_HOST_AUTH_METHOD=trust -p 8000:5432 -d ballerinax-postgresql"
        
        def healthCheck = 1;
        def counter = 0;
        doLast {
            checkExecResult(executionResult, 'Error', standardOutput)
            while (healthCheck != 0 && counter < 12) {
                sleep(5 * 1000)
                healthCheck = checkTestDockerContainerStatus(poolContainerName)
                counter = counter + 1;
            }
            if (healthCheck != 0) {
                throw new GradleException("Docker container ${poolContainerName} health test exceeded timeout!")
            }
        }
    }
}

task startSslDockerContainer(type: Exec) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        def standardOutput = new ByteArrayOutputStream()
        commandLine 'sh', '-c', "docker run --rm -d --name ${sslContainerName} -e POSTGRES_PASSWORD=postgres -e POSTGRES_HOST_AUTH_METHOD=trust -p 8001:5432 -d ballerinax-postgresql -c ssl=on -c ssl_cert_file=/etc/ssl/server.crt -c ssl_key_file=/etc/ssl/server.key"

        def healthCheck = 1;
        def counter = 0;
        doLast {
            checkExecResult(executionResult, 'Error', standardOutput)
            while (healthCheck != 0 && counter < 12) {
                sleep(5 * 1000)
                healthCheck = checkTestDockerContainerStatus(sslContainerName)
                counter = counter + 1;
            }
            if (healthCheck != 0) {
                throw new GradleException("Docker container '${sslContainerName}' health test exceeded timeout!")
            }
        }
    }
}

task stopTestDockerContainer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            try {
                def stdOut = new ByteArrayOutputStream()
                exec {
                    commandLine 'sh', '-c', "docker stop ${poolContainerName}"
                    standardOutput = stdOut
                }
                exec {
                    commandLine 'sh', '-c', "docker stop ${sslContainerName}"
                    standardOutput = stdOut
                }
                exec {
                    commandLine 'sh', '-c', "docker stop ${testContainerName}"
                    standardOutput = stdOut
                }
                exec {
                    commandLine 'sh', '-c', "docker stop ${limitedContainerName}"
                    standardOutput = stdOut
                }
            } catch (all) {
                println("Process can safely ignore stopTestDockerContainer task")
            }
        }
    }
}


updateTomlFiles.dependsOn copyStdlibs

startTestDockerContainer.dependsOn createTestDockerImage
startTestPoolDockerContainer.dependsOn createTestDockerImage
startSslDockerContainer.dependsOn createTestDockerImage

build.dependsOn "generatePomFileForMavenPublication"
build.dependsOn ":${packageName}-native:build"
test.dependsOn ":${packageName}-native:build"
build.dependsOn ":${packageName}-compiler-plugin:build"
test.dependsOn ":${packageName}-compiler-plugin:build"
build.finalizedBy stopTestDockerContainer
test.dependsOn startTestDockerContainer
test.dependsOn startTestLimitedDockerContainer
test.dependsOn startTestPoolDockerContainer
test.dependsOn startSslDockerContainer
